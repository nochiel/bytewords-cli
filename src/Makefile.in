# @configure_input@

#
#  Makefile.in
#
#  Copyright Â© 2020 by Blockchain Commons, LLC
#  Licensed under the "BSD-2-Clause Plus Patent License"
#

# Package-specific substitution variablesr
package = @PACKAGE_NAME@
version = @PACKAGE_VERSION@
tarname = @PACKAGE_TARNAME@

# Prefix-specific substitution variables
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@

# VPATH-specific substitution variables
srcdir = @srcdir@
VPATH = @srcdir@

# Terminal colors
RED=`tput setaf 1`
GREEN=`tput setaf 2`
RESET=`tput sgr0`

CBOR_DIR = ../deps/cbor-lite

# COMPILER = g++
CFLAGS += --debug -O0 -I"../deps/bc-bytewords/src"
CXXFLAGS += -std=c++17 --debug -O0 -I"$(CBOR_DIR)/include" -I"../deps/bc-bytewords/src"
ifeq ($(GXX), no)
	# clang 
	CXXFLAGS +=  -stdlib=libc++ 
endif

toolname = bytewords

# LDFLAGS += -L../deps/argp-standalone/argp-standalone -L../deps/bc-bytewords/src -L../deps/bc-crypto-base/src 
LDLIBS += $(LDFLAGS) -lm -lstdc++ -lbc-bytewords -largp -lbc-crypto-base
UNAME := $(shell uname)
ifeq ($(UNAME), Linux)
	# TODO(nochiel) I don't think these flags are needed anymore. Verify that we can leave it out.
	# https://libcxx.llvm.org//UsingLibcxx.html#using-libc-on-linux 
	# LDLIBS += -lc++ -lc++abi -lgcc_s -lgcc
else ifeq ($(findstring MINGW64, $(UNAME)), MINGW64) 
	# on windows building with msys2/mingw64 
	LDLIBS += -lc++ -lws2_32
endif

libargp.a:
	cd ../deps/argp-standalone/argp-standalone && make
	cp ../deps/argp-standalone/argp-standalone/libargp.a ./

libbc-crypto-base.a:
	cd ../deps/bc-crypto-base && make
	cp ../deps/bc-crypto-base/src/libbc-crypto-base.a ./

libbc-bytewords.a: libbc-crypto-base.a
	cd ../deps/bc-bytewords && make LDFLAGS=-L../../bc-crypto-base/src
	cp ../deps/bc-bytewords/src/libbc-bytewords.a ./

$(toolname).o: params.hpp utils.hpp
utils.o: utils.hpp
params.o: params.hpp utils.hpp config.h

OBJS = \
	$(toolname).o \
	utils.o \
	params.o \
	libargp.a \
	libbc-bytewords.a \
	libbc-crypto-base.a

$(toolname): $(OBJS)

.PHONY: all
all: $(toolname)

bindir = $(DESTDIR)/$(prefix)/bin

.PHONY: install
install: $(toolname)
	install -d $(bindir)
	install $(toolname) $(bindir)

.PHONY: uninstall
uninstall:
	rm -f $(bindir)/$(toolname)
	-rmdir $(bindir) >/dev/null 2>&1

.PHONY: check
check: $(toolname)
	./test.sh ./$(toolname)

.PHONY: clean
clean:
	rm -f $(toolname) *.o
	rm -rf *.dSYM

.PHONY: distclean
distclean: clean
	rm -f Makefile
	rm -f config.h

.PHONY: lint
lint:
	cppcheck --enable=all --inline-suppr --suppress=missingInclude .
